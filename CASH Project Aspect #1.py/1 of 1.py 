# Max wants a python file that continuously runs and scrapes aptos for new transactions on his CASH token
# Build a python script to listen for all transfers and swaps in/out of CASH
# Example of a transfer of CASH: https://explorer.aptoslabs.com/txn/0x5509d96cb43c287f3562cdc5d0162cd66e0b0b3fe56be3cc3efbb3905d737d72?network=mainnet

from aptos_sdk.client import RestClient
from aptos_sdk.account import Account
import time
import json

# Address for hashing: 0x61ed8b048636516b4eaf4c74250fa4f9440d9c3e163d96aeb863fe658a4bdc67::CASH::CASH
# Use Liquidswap for DEX
# Use Aptos RPC 
# Listen for event i.e. swap 
# Find where token = hash 
# Ask cursor what step would look like before I properly ask it 

# Configuration
CASH_TOKEN_TYPE = "0x61ed8b048636516b4eaf4c74250fa4f9440d9c3e163d96aeb863fe658a4bdc67::CASH::CASH"
LIQUIDSWAP_ACCOUNT = "0x190d44266241744264b964a37b8f09863167a12d3e70cda39376cfb4e3561e12"
NODE_URL = "https://fullnode.mainnet.aptoslabs.com"

client = RestClient(NODE_URL)

def get_liquidswap_swap_events(start_sequence=0, limit=100):
    """Get swap events from Liquidswap"""
    try:
        events = client.get_events_by_event_handle(
            account=LIQUIDSWAP_ACCOUNT,
            event_handle_struct=f"{LIQUIDSWAP_ACCOUNT}::liquidswap_v1::LiquidswapV1",
            field_name="swap_events",
            start=start_sequence,
            limit=limit
        )
        return events
    except Exception as e:
        print(f"Error getting swap events: {e}")
        return []

def get_liquidswap_add_liquidity_events(start_sequence=0, limit=100):
    """Get add liquidity events from Liquidswap"""
    try:
        events = client.get_events_by_event_handle(
            account=LIQUIDSWAP_ACCOUNT,
            event_handle_struct=f"{LIQUIDSWAP_ACCOUNT}::liquidswap_v1::LiquidswapV1",
            field_name="add_liquidity_events",
            start=start_sequence,
            limit=limit
        )
        return events
    except Exception as e:
        print(f"Error getting add liquidity events: {e}")
        return []

def get_liquidswap_remove_liquidity_events(start_sequence=0, limit=100):
    """Get remove liquidity events from Liquidswap"""
    try:
        events = client.get_events_by_event_handle(
            account=LIQUIDSWAP_ACCOUNT,
            event_handle_struct=f"{LIQUIDSWAP_ACCOUNT}::liquidswap_v1::LiquidswapV1",
            field_name="remove_liquidity_events",
            start=start_sequence,
            limit=limit
        )
        return events
    except Exception as e:
        print(f"Error getting remove liquidity events: {e}")
        return []

def is_cash_related_event(event_data):
    """Check if the event involves CASH token"""
    event_str = json.dumps(event_data, default=str)
    return CASH_TOKEN_TYPE in event_str

def process_swap_event(event):
    """Process a swap event and extract relevant information"""
    try:
        txn = client.transaction_by_version(event["version"])
        
        event_data = event.get("data", {})
        
        swap_info = {
            "transaction_hash": txn["hash"],
            "version": event["version"],
            "timestamp": txn["timestamp"],
            "sender": txn["sender"],
            "event_type": "swap",
            "event_data": event_data,
            "gas_used": txn.get("gas_used", 0),
            "success": txn.get("success", True)
        }
        
        return swap_info
    except Exception as e:
        print(f"Error processing swap event: {e}")
        return None

def scan_liquidswap_for_cash_transactions():
    """Main function to scan Liquidswap for CASH transactions"""
    
    # Track the last processed event sequence numbers
    last_swap_sequence = 0
    last_add_liquidity_sequence = 0
    last_remove_liquidity_sequence = 0
    
    print(f"Starting to scan Liquidswap for CASH token transactions...")
    print(f"CASH Token Type: {CASH_TOKEN_TYPE}")
    print(f"Liquidswap Account: {LIQUIDSWAP_ACCOUNT}")
    
    while True:
        try:
            # Get swap events
            swap_events = get_liquidswap_swap_events(last_swap_sequence, 100)
            for event in swap_events:
                if is_cash_related_event(event["data"]):
                    swap_info = process_swap_event(event)
                    if swap_info:
                        print(f"SWAP: {json.dumps(swap_info, indent=2)}")
                last_swap_sequence = max(last_swap_sequence, event["sequence_number"] + 1)
            
            # Get add liquidity events
            add_liquidity_events = get_liquidswap_add_liquidity_events(last_add_liquidity_sequence, 100)
            for event in add_liquidity_events:
                if is_cash_related_event(event["data"]):
                    print(f"ADD LIQUIDITY: {json.dumps(event, indent=2)}")
                last_add_liquidity_sequence = max(last_add_liquidity_sequence, event["sequence_number"] + 1)
            
            # Get remove liquidity events
            remove_liquidity_events = get_liquidswap_remove_liquidity_events(last_remove_liquidity_sequence, 100)
            for event in remove_liquidity_events:
                if is_cash_related_event(event["data"]):
                    print(f"REMOVE LIQUIDITY: {json.dumps(event, indent=2)}")
                last_remove_liquidity_sequence = max(last_remove_liquidity_sequence, event["sequence_number"] + 1)
            
            # Wait before next poll
            time.sleep(5)  # Poll every 5 seconds
            
        except KeyboardInterrupt:
            print("Scanning stopped by user")
            break
        except Exception as e:
            print(f"Error in main loop: {e}")
            time.sleep(10)  # Wait longer on error

if __name__ == "__main__":
    scan_liquidswap_for_cash_transactions()
